openapi: 3.0.3
info:
  title: Food Court Ordering System API
  description: API for managing food court merchants, menus, orders, and buyer sessions
  version: 1.0.0
  contact:
    name: Ngantri Development Team

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://ngantri.vercel.app/api
    description: Production server

paths:
  # Merchant Authentication
  /merchants/register:
    post:
      summary: Register new merchant account
      operationId: registerMerchant
      tags: [Merchants]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone_number, password, name]
              properties:
                phone_number:
                  type: string
                  pattern: '^\+[1-9]\d{1,14}$'
                  description: WhatsApp-compatible phone number
                password:
                  type: string
                  minLength: 8
                  description: Plain text password (will be hashed)
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                  description: Merchant business name
                description:
                  type: string
                  maxLength: 500
                  description: Business description
      responses:
        "201":
          description: Merchant registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "409":
          description: Phone number already registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /merchants/login:
    post:
      summary: Authenticate merchant
      operationId: loginMerchant
      tags: [Merchants]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [phone_number, password]
              properties:
                phone_number:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantResponse"
          headers:
            Set-Cookie:
              description: Session cookie
              schema:
                type: string
        "401":
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /merchants/profile:
    get:
      summary: Get merchant profile
      operationId: getMerchantProfile
      tags: [Merchants]
      security:
        - sessionAuth: []
      responses:
        "200":
          description: Merchant profile data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

    put:
      summary: Update merchant profile
      operationId: updateMerchantProfile
      tags: [Merchants]
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  type: string
                  maxLength: 500
                image_url:
                  type: string
                  format: uri
                is_available:
                  type: boolean
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MerchantResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /merchants/upload/profile-image:
    post:
      summary: Upload merchant profile image
      operationId: uploadMerchantImage
      tags: [Merchants]
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [image]
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file (JPEG, PNG, WebP max 2MB)
      responses:
        "200":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                required: [image_url]
                properties:
                  image_url:
                    type: string
                    format: uri
                    description: URL path to uploaded image
        "400":
          description: Invalid file type or size
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

  /merchants/upload/menu-image:
    post:
      summary: Upload menu item image
      operationId: uploadMenuImage
      tags: [Menus]
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [image]
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file (JPEG, PNG, WebP max 2MB)
      responses:
        "200":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                required: [image_url]
                properties:
                  image_url:
                    type: string
                    format: uri
                    description: URL path to uploaded image
        "400":
          description: Invalid file type or size
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
        "401":
          $ref: "#/components/responses/Unauthorized"

  # Menu Management
  /merchants/categories:
    get:
      summary: Get merchant's menu categories
      operationId: getMerchantCategories
      tags: [Menus]
      security:
        - sessionAuth: []
      responses:
        "200":
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CategoryResponse"

    post:
      summary: Create new menu category
      operationId: createCategory
      tags: [Menus]
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
      responses:
        "201":
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"

  /merchants/categories/{categoryId}:
    put:
      summary: Update menu category
      operationId: updateCategory
      tags: [Menus]
      security:
        - sessionAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name]
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 50
      responses:
        "200":
          description: Category updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"

    delete:
      summary: Delete menu category
      operationId: deleteCategory
      tags: [Menus]
      security:
        - sessionAuth: []
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Category deleted successfully

  /merchants/menus:
    get:
      summary: Get merchant's menu items
      operationId: getMerchantMenus
      tags: [Menus]
      security:
        - sessionAuth: []
      parameters:
        - name: category_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by category
        - name: cursor
          in: query
          schema:
            type: string
          description: Base64-encoded UUIDv7 cursor for pagination
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
          description: Number of items per page
        - name: direction
          in: query
          schema:
            type: string
            enum: [next, prev]
            default: next
          description: Pagination direction
      responses:
        "200":
          description: List of menu items with pagination
          content:
            application/json:
              schema:
                type: object
                required: [data, pagination]
                properties:
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/MenuResponse"
                  pagination:
                    $ref: "#/components/schemas/PaginationResponse"

    post:
      summary: Create new menu item
      operationId: createMenu
      tags: [Menus]
      security:
        - sessionAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [category_id, name, price]
              properties:
                category_id:
                  type: string
                  format: uuid
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  type: string
                  maxLength: 500
                image_url:
                  type: string
                  format: uri
                price:
                  type: integer
                  minimum: 1
                  description: Price in Indonesian Rupiah (IDR)
                is_available:
                  type: boolean
                  default: true
      responses:
        "201":
          description: Menu item created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuResponse"

  /merchants/menus/{menuId}:
    put:
      summary: Update menu item
      operationId: updateMenu
      tags: [Menus]
      security:
        - sessionAuth: []
      parameters:
        - name: menuId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                category_id:
                  type: string
                  format: uuid
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                description:
                  type: string
                  maxLength: 500
                image_url:
                  type: string
                  format: uri
                price:
                  type: integer
                  minimum: 1
                is_available:
                  type: boolean
      responses:
        "200":
          description: Menu item updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MenuResponse"

    delete:
      summary: Delete menu item
      operationId: deleteMenu
      tags: [Menus]
      security:
        - sessionAuth: []
      parameters:
        - name: menuId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Menu item deleted successfully

  # Public Menu Browsing
  /menus:
    get:
      summary: Browse all available menus (public)
      operationId: browseMenus
      tags: [Public]
      parameters:
        - name: merchant_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by merchant
        - name: category_id
          in: query
          schema:
            type: string
            format: uuid
          description: Filter by category
        - name: available_only
          in: query
          schema:
            type: boolean
            default: true
          description: Show only available items
      responses:
        "200":
          description: List of available menu items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicMenuResponse"

  /merchants:
    get:
      summary: Get all available merchants (public)
      operationId: getMerchants
      tags: [Public]
      parameters:
        - name: available_only
          in: query
          schema:
            type: boolean
            default: true
          description: Show only available merchants
      responses:
        "200":
          description: List of merchants
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PublicMerchantResponse"

  # Buyer Sessions and Cart Management
  /sessions:
    post:
      summary: Create buyer session
      operationId: createSession
      tags: [Sessions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, phone_number]
              properties:
                name:
                  type: string
                  minLength: 1
                  maxLength: 100
                phone_number:
                  type: string
                  pattern: '^\+[1-9]\d{1,14}$'
      responses:
        "201":
          description: Session created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SessionResponse"

  /sessions/{sessionId}/cart:
    get:
      summary: Get cart contents
      operationId: getCart
      tags: [Cart]
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Cart contents
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponse"

    post:
      summary: Add item to cart
      operationId: addToCart
      tags: [Cart]
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [menu_id, quantity]
              properties:
                menu_id:
                  type: string
                  format: uuid
                quantity:
                  type: integer
                  minimum: 1
      responses:
        "200":
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponse"

  /sessions/{sessionId}/cart/{itemId}:
    put:
      summary: Update cart item quantity
      operationId: updateCartItem
      tags: [Cart]
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity:
                  type: integer
                  minimum: 0
                  description: Set to 0 to remove item
      responses:
        "200":
          description: Cart item updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CartResponse"

    delete:
      summary: Remove item from cart
      operationId: removeFromCart
      tags: [Cart]
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: itemId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "204":
          description: Item removed from cart

  /sessions/{sessionId}/checkout:
    post:
      summary: Checkout cart and create orders
      operationId: checkout
      tags: [Orders]
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "201":
          description: Orders created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderResponse"

  # Order Management
  /merchants/orders:
    get:
      summary: Get merchant's orders
      operationId: getMerchantOrders
      tags: [Orders]
      security:
        - sessionAuth: []
      parameters:
        - name: status
          in: query
          schema:
            $ref: "#/components/schemas/OrderStatus"
          description: Filter by status
        - name: date
          in: query
          schema:
            type: string
            format: date
          description: Filter by order date
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/OrderResponse"

  /merchants/orders/{orderId}/status:
    put:
      summary: Update order status
      operationId: updateOrderStatus
      tags: [Orders]
      security:
        - sessionAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [status]
              properties:
                status:
                  $ref: "#/components/schemas/OrderStatus"
      responses:
        "200":
          description: Order status updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"

  /merchants/orders/{orderId}/whatsapp-url:
    get:
      summary: Generate WhatsApp URL for buyer notification
      operationId: getWhatsAppUrl
      tags: [Orders]
      security:
        - sessionAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: WhatsApp URL generated successfully
          content:
            application/json:
              schema:
                type: object
                required: [whatsapp_url, message]
                properties:
                  whatsapp_url:
                    type: string
                    format: uri
                    description: wa.me URL with preset message
                    example: "https://wa.me/6281234567890?text=Hello%2C%20your%20order%20251005-0001%20at%20Gudeg%20Pak%20Joko%20is%20ready%20for%20pickup!"
                  message:
                    type: string
                    description: The preset message content
                    example: "Hello, your order 251005-0001 at Gudeg Pak Joko is ready for pickup!"
                  phone_number:
                    type: string
                    description: Buyer's phone number
        "404":
          description: Order not found

  /orders/{orderNumber}:
    get:
      summary: Get order details by order number (public)
      operationId: getOrderByNumber
      tags: [Orders]
      parameters:
        - name: orderNumber
          in: path
          required: true
          schema:
            type: string
            pattern: '^\d{6}-\d{4}$'
            description: Format YYMMDD-XXXX
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderResponse"
        "404":
          description: Order not found

components:
  securitySchemes:
    sessionAuth:
      type: apiKey
      in: cookie
      name: session

  schemas:
    OrderStatus:
      type: string
      enum:
        - payment_pending
        - paid
        - cancelled
        - preparing
        - ready_for_pickup
        - picked
        - completed

    ErrorResponse:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
          description: Error code
        message:
          type: string
          description: Human-readable error message
        details:
          type: object
          description: Additional error context

    PaginationResponse:
      type: object
      required: [has_next, has_prev]
      properties:
        has_next:
          type: boolean
          description: Whether there are more items after this page
        has_prev:
          type: boolean
          description: Whether there are items before this page
        next_cursor:
          type: string
          nullable: true
          description: Base64-encoded UUIDv7 cursor for next page
        prev_cursor:
          type: string
          nullable: true
          description: Base64-encoded UUIDv7 cursor for previous page
        total_count:
          type: integer
          nullable: true
          description: Total count (may be omitted for performance)

    MerchantResponse:
      type: object
      required:
        [
          id,
          phone_number,
          merchant_number,
          name,
          is_available,
          created_at,
          updated_at,
        ]
      properties:
        id:
          type: string
          format: uuid
        phone_number:
          type: string
        merchant_number:
          type: integer
        name:
          type: string
        image_url:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          nullable: true
        is_available:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PublicMerchantResponse:
      type: object
      required: [id, merchant_number, name, is_available]
      properties:
        id:
          type: string
          format: uuid
        merchant_number:
          type: integer
        name:
          type: string
        image_url:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          nullable: true
        is_available:
          type: boolean

    CategoryResponse:
      type: object
      required: [id, merchant_id, name, created_at, updated_at]
      properties:
        id:
          type: string
          format: uuid
        merchant_id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    MenuResponse:
      type: object
      required:
        [
          id,
          merchant_id,
          category_id,
          name,
          price,
          is_available,
          created_at,
          updated_at,
        ]
      properties:
        id:
          type: string
          format: uuid
        merchant_id:
          type: string
          format: uuid
        category_id:
          type: string
          format: uuid
        name:
          type: string
        image_url:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: integer
          description: Price in cents
        is_available:
          type: boolean
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    PublicMenuResponse:
      type: object
      required: [id, merchant, category_name, name, price, is_available]
      properties:
        id:
          type: string
          format: uuid
        merchant:
          $ref: "#/components/schemas/PublicMerchantResponse"
        category_name:
          type: string
        name:
          type: string
        image_url:
          type: string
          format: uri
          nullable: true
        description:
          type: string
          nullable: true
        price:
          type: integer
          description: Price in cents
        is_available:
          type: boolean

    SessionResponse:
      type: object
      required: [id, name, phone_number, created_at]
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        phone_number:
          type: string
        created_at:
          type: string
          format: date-time

    CartItemResponse:
      type: object
      required: [id, menu, quantity, subtotal]
      properties:
        id:
          type: string
          format: uuid
        menu:
          $ref: "#/components/schemas/PublicMenuResponse"
        quantity:
          type: integer
        subtotal:
          type: integer
          description: Price × quantity in cents

    CartResponse:
      type: object
      required: [id, total_quantity, items_by_merchant]
      properties:
        id:
          type: string
          format: uuid
        total_quantity:
          type: integer
        items_by_merchant:
          type: object
          additionalProperties:
            type: object
            properties:
              merchant:
                $ref: "#/components/schemas/PublicMerchantResponse"
              items:
                type: array
                items:
                  $ref: "#/components/schemas/CartItemResponse"
              merchant_total:
                type: integer
                description: Total for this merchant in cents

    OrderItemResponse:
      type: object
      required: [id, menu_name, price, quantity, subtotal]
      properties:
        id:
          type: string
          format: uuid
        menu_id:
          type: string
          format: uuid
        menu_name:
          type: string
        menu_image_url:
          type: string
          format: uri
          nullable: true
        price:
          type: integer
          description: Price at time of order in Indonesian Rupiah (IDR)
        quantity:
          type: integer
        subtotal:
          type: integer
          description: Price × quantity in Indonesian Rupiah (IDR)

    OrderResponse:
      type: object
      required:
        [
          id,
          order_number,
          merchant_name,
          status,
          total_quantity,
          total_amount,
          items,
          created_at,
          updated_at,
        ]
      properties:
        id:
          type: string
          format: uuid
        buyer_session_id:
          type: string
          format: uuid
        merchant_id:
          type: string
          format: uuid
        merchant_name:
          type: string
        merchant_image_url:
          type: string
          format: uri
          nullable: true
        order_number:
          type: string
          pattern: '^\d{6}-\d{4}$'
        status:
          $ref: "#/components/schemas/OrderStatus"
        total_quantity:
          type: integer
        total_amount:
          type: integer
          description: Total in cents
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItemResponse"
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

  responses:
    BadRequest:
      description: Invalid request data
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
